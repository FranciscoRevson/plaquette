# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'src/**'
      - 'docs/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:                                                                                                                            

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run
# in-progress and latest queued. However, do NOT cancel in-progress runs as we
# want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip'
          cache-dependency-path: 'requirements*.txt'
      - name: Install Python packages
        run: python3 -m pip install -r requirements_dev.txt -r requirements.txt
      - name: Build Sphinx documentation
        run: |
          pushd docs
          make clean html 2>&1 |
              sed -r 's#^([^:]*):([0-9]+):(.*) WARNING: (.*)$#::warning file=\1,line=\2::\3 \4#;
                      s#^([^:]*):(.*) WARNING: (.*)$#::warning file=\1::\2 \3#'
          popd
          build_ret="${PIPESTATUS[0]}"
          if [ "$build_ret" -ne 0 ]; then
              echo "Sphinx returned error code $build_ret"
              exit 1
          fi
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire folder
          path: 'docs/_build/html'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
      - name: Cache built docs
        uses: actions/cache@v3
        id: cache-docs
        with:
          path: '*.tar.gz'
          key: ${{ runner.os }}-${{ hashFiles('docs/**/*.rst') }}
      - name: Zip archive compiled docs
        if: steps.cache-docs.outputs.cache-hit != 'true'
        run: |
          export PYTHONPATH=src
          docs_archive="$(python -m plaquette)-docs.tar.gz"
          cd docs/_build/html
          tar -czf $docs_archive ./*
      - name: Upload docs archive
        uses: actions/upload-artifact@v3
        with:
          name: docs-archive
          path: plaquette-*.tar.gz
